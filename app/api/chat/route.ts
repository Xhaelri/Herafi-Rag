import { DataAPIClient } from "@datastax/astra-db-ts";
import { generateId, generateText, Message } from "ai";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateSentenceEmbedding } from "@/lib/sentence-transformer-embedding";
import { NextResponse } from "next/server";

const {
  ASTRA_DB_NAMESPACE,
  ASTRA_DB_COLLECTION,
  ASTRA_DB_API_ENDPOINT,
  ASTRA_DB_APPLICATION_TOKEN,
  GOOGLE_API_KEY,
} = process.env;

console.log("Environment check:", {
  hasNamespace: !!ASTRA_DB_NAMESPACE,
  hasCollection: !!ASTRA_DB_COLLECTION,
  hasEndpoint: !!ASTRA_DB_API_ENDPOINT,
  hasToken: !!ASTRA_DB_APPLICATION_TOKEN,
  hasGoogleApiKey: !!GOOGLE_API_KEY,
});

const client = new DataAPIClient(ASTRA_DB_APPLICATION_TOKEN!);
const db = client.db(ASTRA_DB_API_ENDPOINT!, { keyspace: ASTRA_DB_NAMESPACE });

const google = createGoogleGenerativeAI({
  apiKey: process.env.GOOGLE_API_KEY || "",
});

const MAX_CONTEXT_LENGTH = 30000;
const MIN_SIMILARITY = 0.2;

export async function POST(req: Request) {
  try {
    const { messages } = await req.json();
    const latestMessage = messages[messages.length - 1];

    if (!latestMessage || (!latestMessage.content && !latestMessage.parts)) {
      return NextResponse.json(
        { error: "Invalid message format" },
        { status: 400 }
      );
    }

    console.log(
      "Received message content:",
      JSON.stringify(latestMessage.content)
    );

    let textContent = "";
    if (typeof latestMessage.content === "string") {
      textContent = latestMessage.content;
    } else if (Array.isArray(latestMessage.content)) {
      textContent = latestMessage.content
        .filter((part: any) => part.type === "text")
        .map((part: any) => part.text)
        .join("\n");
    }

    if (!textContent) {
      textContent = "ูุตู ุงูุตูุฑุฉ";
    }

    console.log("Processing query:", textContent.substring(0, 50));

    console.log("Generating embedding for query...");
    const embeddingResult = await generateSentenceEmbedding(textContent);
    const embeddingVector = embeddingResult.embedding;
    console.log("Embedding vector length:", embeddingVector.length);

    let docContext = "";
    let relevantDocsFound = false;
    try {
      console.log("Querying vector database...");
      const collection = db.collection(ASTRA_DB_COLLECTION!);
      console.log(`Using collection: ${ASTRA_DB_COLLECTION}`);

      const documentCheck = await collection.findOne({});
      if (!documentCheck) {
        console.warn(
          "WARNING: No documents found in collection. Check data loading."
        );
        docContext = "ูู ูุชู ุงูุนุซูุฑ ุนูู ูุณุชูุฏุงุช ูู ูุงุนุฏุฉ ุงููุนุฑูุฉ.";
      } else {
        
        const cursor = collection.find(null, {
          sort: { $vector: embeddingVector },
          limit: 15,
          includeSimilarity: true,
        });

        console.log("Vector search params:", {
          vectorLength: embeddingVector.length,
          collectionName: ASTRA_DB_COLLECTION,
        });
        const documents = await cursor.toArray();
        console.log(
          `Found ${documents.length} potential documents via vector search`
        );

        let relevantDocuments = documents;
        if (documents.length > 0 && documents[0]?._similarity !== undefined) {
          relevantDocuments = documents.filter(
            (doc) =>
              doc._similarity !== undefined && doc._similarity >= MIN_SIMILARITY
          );
          console.log(
            `${relevantDocuments.length} documents meet similarity threshold of ${MIN_SIMILARITY}`
          );
        } else if (documents.length > 0) {
          console.log(
            `Using all ${documents.length} found documents (similarity not available)`
          );
        } else {
          console.log("No potential documents found.");
          relevantDocuments = [];
        }

        if (relevantDocuments.length > 0) {
          relevantDocsFound = true;
          console.log("First relevant document:", {
            text_preview: relevantDocuments[0].text.substring(0, 100),
            similarity: relevantDocuments[0]._similarity || "N/A",
          });

          docContext = relevantDocuments
            .map((doc, i) => {
              const similarity = doc._similarity
                ? `(ูุฏู ุงูุตูุฉ: ${doc._similarity.toFixed(2)})`
                : "(ุฏุฑุฌุฉ ุงูุตูุฉ ุบูุฑ ูุชููุฑุฉ)";
              const title =
                doc.title || doc.text.split("\n")[0].substring(0, 50) + "...";
              const sourceId = doc.sourceId || doc._id || `doc-${i + 1}`;
              const sourceIdMetadata = `sourceId: ${sourceId}`;

              return `--- ุงููุณุชูุฏ ${i + 1}: ${title} ${similarity} ---\n${
                doc.text
              }\n${sourceIdMetadata}\n--- ููุงูุฉ ุงููุณุชูุฏ ${i + 1} ---`;
            })
            .join("\n\n");

          if (docContext.length > MAX_CONTEXT_LENGTH) {
            console.log(
              `Context too large (${docContext.length} chars), truncating...`
            );
            docContext =
              docContext.substring(0, MAX_CONTEXT_LENGTH) +
              "\n[ุชู ุงูุชุทุงุน ุงูุณูุงู ุจุณุจุจ ุงูุทูู ุงูุฒุงุฆุฏ]";
          }

          console.log("Context length:", docContext.length);
        } else {
          console.warn("No documents meet the criteria for this query.");
          docContext =
            "ูู ูุชู ุงูุนุซูุฑ ุนูู ูุนูููุงุช ุฐุงุช ุตูุฉ ูุงููุฉ ูู ูุงุนุฏุฉ ุงููุนุฑูุฉ ููุฐุง ุงูุงุณุชุนูุงู.";
        }
      }
    } catch (error) {
      console.error("DB query error:", error);
      console.error("Error details:", JSON.stringify(error, null, 2));
      docContext = "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฑุฏุงุฏ ูุนูููุงุช ุงูุณูุงู.";
    }

    const systemPrompt = `
ุฃูุช ูุณุงุนุฏ ุฐูู ููุชุนุงูู ุฎุงุต ุจูููุน ุญุฑููุ ูุฏูู ุงูุฃุณุงุณู ูู ูุณุงุนุฏุฉ ุงููุณุชุฎุฏููู ูู ุฅูุฌุงุฏ ุญููู ููุดุงูููู ุงูููุฒููุฉ ุฃู ุงูุชุฑุงุญ ุฎุฏูุงุช ุงูุญุฑูููู ุนูุฏ ุงูุญุงุฌุฉ.

### ุงูุณูุงู ุงููุณุชุฑุฌุน (ูุฏ ูุญุชูู ุนูู ูุนูููุงุช ุฃู ููุงุฆู ุญุฑูููู) ###
${docContext}
### ููุงูุฉ ุงูุณูุงู ###

๐ข ุชุนูููุงุช ุงูุนูู:

1. **ุฅุฐุง ุทูุจ ุงููุณุชุฎุฏู ุญุฑูู ูุญุฏุฏ ุจุดูู ุตุฑูุญ** (ูุซู: "ุฃุญุชุงุฌ ุณุจุงู"ุ "ุฃุฑูุฏ ููุฑุจุงุฆู"ุ "ุฏููู ุนูู ูุฌุงุฑ"):
    - **ุฃููุงู:** ุงุจุญุซ ุจุฏูุฉ ูู \`ุงูุณูุงู ุงููุณุชุฑุฌุน\` ุนู **ูุงุฆูุฉ ุญุฑูููู** ุชุทุงุจู ุงูููุน ุงููุทููุจ.
    - **ุฅุฐุง ูุฌุฏุช ูุงุฆูุฉ:** 
      - ุงูุชุจ ุฑุณุงูุฉ ููุฌุฒุฉ ุชููู ุฃูู ูุฌุฏุช ุญุฑูููู ููุงุณุจููุ ูุซู: "ูุฌุฏุช ูู ุญุฑูููู ูุชุฎุตุตูู ูู ุงููุฌุงุฑุฉ:"
      - ุซู ุงุญุชูุธ ุจุชูุณูู ุงููุณุชูุฏุงุช ุงูุฃุตูู ูุน ุจุฏุงูุฉ ูู ูุณุชูุฏ ุจู "--- ุงููุณุชูุฏ" ูููุงูุชู ุจู "--- ููุงูุฉ ุงููุณุชูุฏ" ููู ูุชููู ูุธุงู ุงูุนุฑุถ ูู ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช ูุนุฑุถูุง ูู ุจุทุงูุงุช
      - ูุง ุชูุฑุฑ ุงููุนูููุงุช ุงูุชู ุณุชุธูุฑ ูู ุงูุจุทุงูุงุช ูู ูุต ุฑุณุงูุชู
    - **ุฅุฐุง ูู ุชุฌุฏ ูุงุฆูุฉ:** ุฃุฎุจุฑ ุงููุณุชุฎุฏู ุจูุถูุญ ุฃูู ูู ุชุนุซุฑ ุนูู ูุงุฆูุฉ ููุฐุง ุงูููุน ูู ุงูุญุฑูููู ูู ุงูุณูุงู ุงูุญุงููุ ุซู ุงูุชุฑุญ ุนููู ุงุณุชุฎุฏุงู ูููุนูุง "ุญุฑูู" ููุจุญุซ ุนู ุญุฑูููู ููุงุณุจูู.

2. **ุฅุฐุง ูุงู ุทูุจ ุงููุณุชุฎุฏู ูุชุนูู ุจุญู ูุดููุฉ ููุฒููุฉ ุฃู ุงุณุชูุณุงุฑ ุนุงู** (ููู ูุทูุจ ุญุฑูู ุจุดูู ุตุฑูุญ):
    - ุญุงูู ุฃููุงู ุชูุฏูู ูุตุงุฆุญ ุนูููุฉ ูุฎุทูุงุช ููุณุงุนุฏุชู ุนูู ุญู ุงููุดููุฉ ุจููุณู.
    - ุงุณุชุนู ุจู \`ุงูุณูุงู ุงููุณุชุฑุฌุน\` ุฅู ูุงู ูุญุชูู ุนูู ูุนูููุงุช ูููุฏุฉ ูุฏุนู ุงููุตูุญุฉ.
    - **ูุง ุชูุชุฑุญ ุงูุชูุงุตู ูุน ุญุฑูู** ุฅูุง ุฅุฐุง:
        - ุชุจูู ุฃู ุงูุญู ูุชุทูุจ ุชุฏุฎูุงู ูุชุฎุตุตุงู.
        - ุฃู ุทูุจ ุงููุณุชุฎุฏู ุฐูู ุตุฑุงุญุฉ ุฃุซูุงุก ุงููุญุงุฏุซุฉ.

3. **ูุงู ุฌุฏุงู: ุนูุฏ ุนุฑุถ ุงูุญุฑูููู:**
    - ูุง ุชูุฑุฑ ุจูุงูุงุช ุงูุญุฑูููู ูู ูุต ุฑุณุงูุชู ูุฃููุง ุณุชุธูุฑ ูู ุจุทุงูุงุช ูููุตูุฉ
    - ุงูุชู ุจุฌููุฉ ูุซู "ุฅููู ุงูุญุฑูููู ุงููุชุงุญูู:"
    - ุซู ุถุน ุจูุงูุงุช ุงูุญุฑูููู ุจุงูุชูุณูู ุงููุทููุจ ูุน ุงูุญูุงุธ ุนูู ุงูุนูุงูุงุช ุงูุชุงููุฉ:
      - "--- ุงููุณุชูุฏ ุฑูู:"
      - "sourceId: [ุฑูู]"
      - "--- ููุงูุฉ ุงููุณุชูุฏ ุฑูู ---"

4. **ุงููุบุฉ:**
    - ุชุญุฏุซ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู ุงููุงุถุญุฉ.

5. **:ููุงุท ูุงูุฉ**
    - ุงูุช ูุณุงุนุฏ ุฐูู ุฎุงุต ุจูููุน ุญุฑููุ ุงุฐุง ุทูุจ ุงูุนููู ููุงู ุงุฎุฑ ููุจุญุซ ุนู ุญุฑูููู ูุฃูุช ูุง ุชุนุฑู ุณูู ูููุน ุญุฑูู ูุชูุชุฑุญู ุนููู
    - ุงุฐุง ุณุฃู ุงุญุฏ ุงูุนููุงุก ุนู ูููุน ุญุฑููุ ูุฌุจ ุงู ูููู ุงูุฑุฏ ุจุดูู ููุงุณุจ ููุจุฑุฒ ุฃูููุฉ ุงูููุตุฉุ ูุซุงู: ููุตุฉ ุญุฑูู ุจุชูุตูู ูุจุงุดุฑุฉ ุจุฃูุถู ุงูุญุฑูููู ูู ููุทูุชู ูู ูุฎุชูู ุงูุชุฎุตุตุงุช ุฒู ุงูุณุจุงูุฉ ูุงูููุฑุจุงุก ูุงููุฌุงุฑุฉ ูุบูุฑูู. ุชูุฏุฑ ุชุณุชุนุฑุถ ุชููููุงุช ูุชุฌุงุฑุจ ูู ุงููุณุชุฎุฏููู ุณูุงุก ูุงูุช ุฅูุฌุงุจูุฉ ุฃู ุณูุจูุฉ ุจูู ุดูุงููุฉุ ูุชุนุฑุถ ูุดููุชู ุนุดุงู ุชุณุชูุจู ุนุฑูุถ ูู ุฃูุชุฑ ูู ุญุฑููุ ูุชูุงูุถ ุนูู ุงูุณุนุฑ ุจุฑุงุญุชูุ ูุชุฎุชุงุฑ ุงูุนุฑุถ ุงูุฃูุณุจ ููู. ุงููุฑุงุฑ ูู ุฅูุฏู ูุฅูุช ุงููุชุญูู ูู ูู ุฎุทูุฉ  


ูุฏูู ูู ุฌุนู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ุณููุฉ ููุนุงูุฉุ ูุน ุฅุนุทุงุก ุงูุฃููููุฉ ููุณุงุนุฏุชู ูู ุงุชุฎุงุฐ ูุฑุงุฑ ููุงุณุจ ุณูุงุก ุนุจุฑ ูุตูุญุฉ ุนูููุฉ ุฃู ุชูุตูุฉ ุจุญุฑูู ูู ุงูุณูุงู.
`;

    console.log("System prompt length:", systemPrompt.length);
    console.log(
      "System prompt preview (Arabic):",
      systemPrompt.substring(0, 250) + "..."
    );

    const debugInfo = relevantDocsFound
      ? `[DEBUG: Found ${
          docContext.split("--- ุงููุณุชูุฏ").length - 1
        } relevant documents]`
      : "[DEBUG: No relevant documents found in the database]";

    const allMessages: Message[] = [
      {
        id: generateId(),
        role: "system",
        content: systemPrompt,
      },
      ...messages.map((m: any) => {
        if (typeof m.content === "string") {
          return {
            id: generateId(),
            role: m.role,
            content: m.content,
          };
        } else if (Array.isArray(m.content)) {
          return {
            id: generateId(),
            role: m.role,
            content: m.content
              .map((part: any) =>
                part.type === "text"
                  ? { type: "text", text: part.text }
                  : part.type === "image"
                  ? { type: "image", image: part.image }
                  : null
              )
              .filter((part: any) => part !== null),
          };
        }
        return {
          id: generateId(),
          role: m.role,
          content: "",
        };
      }),
    ];

    console.log("Generating AI response with Gemini...");
    console.log("Total messages:", allMessages.length);

    const result = await generateText({
      model: google("gemini-1.5-flash"),
      messages: allMessages,
      temperature: 0.5,
    });

    console.log("Backend response:", result.text);

    return NextResponse.json({
      id: generateId(),
      role: "assistant",
      content: result.text,
      createdAt: new Date().toISOString(),
    });
  } catch (error) {
    console.error("API error:", error);
    console.error(
      error instanceof Error ? error.stack : "No stack trace available"
    );
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
